var utils    = require( '../../utils' );

// require the database, which has already been connected
var integrity_db = require('../schemas/integrity_db.js');
var model = integrity_db.model('integrity_model');

var url = 'localhost';
var urlport = 3000;

var str = '';



	var redis = require("redis")
	  , subscriber = redis.createClient()
	  , publisher  = redis.createClient();

	subscriber.on("message", function(channel, message) {
	  console.log("Message '" + message + "' on channel '" + channel + "' arrived!")

		var http = require('http');

		var options = {
		  host: 'localhost',
		  path: '/api/students',
		  port: '3000',
		  //This is the only line that is new. `headers` is an object with the headers to request
		  //headers: {'custom': 'Custom Header Demo works'}
		};


			next = function(){
				console.log("NEXT()");
				//publisher.publish("test", "haaaaai");
				//publisher.publish("test", "kthxbai");
			}


		callback = function(response) {
		  str = ''
		  response.on('data', function (chunk) {
			str += chunk;
		  });

		  response.on('end', function () {
			console.log(str);
			next();
		  });

		}

		var req = http.request(options, callback);
		req.end();

	});

	subscriber.subscribe("test");


exports.redistest = function(req,res,next) {


	publisher.publish("test", "haaaaai");
	publisher.publish("test", "kthxbai");
}






exports.test2 = function(req,res,next) {

var http = require('http');

var options = {
  host: 'localhost',
  path: '/api/students',
  port: '3000',
  //This is the only line that is new. `headers` is an object with the headers to request
  //headers: {'custom': 'Custom Header Demo works'}
};


	next = function(){
		console.log("NEXT()");
		publisher.publish("test", "haaaaai");
	publisher.publish("test", "kthxbai");
	}


callback = function(response) {
  str = ''
  response.on('data', function (chunk) {
    str += chunk;
  });

  response.on('end', function () {
    console.log(str);
	next();
  });

}

var req = http.request(options, callback);
req.end();




var myCallback = function(data) {
  console.log('got data: '+data);
};

var usingItNow = function(callback) {
  callback('get it?');
};

usingItNow(myCallback);




}





// routes.test handler
exports.addName = function (req,res,next){

	// save the name that the client is trying to post 
	var incomingData = req.body.name;

	var path2check = '/api/students/';
	checkDuplicates(incomingData,path2check,req,res,next);
		
}; // ends exports.test



// subroutine to check if there is a duplicate entry
checkDuplicates = function (incomingData, path2check, req, res2Client, next) {
	
	var options = {
	  host: url,
	  port: urlport,
	  path: path2check,
	  method: 'GET'
	};

	require( 'http' ).request(options, function(resFromDB) {
	  //console.log('STATUS: ' + resFromDB.statusCode);
	  //console.log('HEADERS: ' + JSON.stringify(resFromDB.headers));
	  resFromDB.setEncoding('utf8');
	  resFromDB.on('data', function (chunk) {
		console.log('BODY: ' + chunk + '\n');

		// parse the incoming data stream
		var object = JSON.parse(chunk);

		var checked = 0;
		// iterate through all of the models in the db
		for (var i = 0; i<object.length; i++){


			// STRING Comparison 
			var name4comparison = object[i].name;

			if (incomingData == name4comparison){
				console.log(incomingData + " already exists!\n");
				res2Client.send("\n"+incomingData + " already exists!\n\n");
				
			} else if ( i == object.length - 1 ){
				console.log("OBJECT.LENGTH - 1");
			}

		}

	// if there was no duplicate, we need to post to the data base
	// Still trying to figure out how to do this. Perhaps the "wait for" plugin ??
	// in the mean time, the API will return nothing if there is no duplicate
	res2Client.end();
	

	  });
	}).end();


}


