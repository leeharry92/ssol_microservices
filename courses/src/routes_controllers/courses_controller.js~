var utils    = require( '../../utils' );

// require the database, which has already been connected
var requireDB = require('../schemas/courses_db.js');
var courses_db = requireDB.getdb;
var courses_model = requireDB.getModel;
 
var model = courses_db.model('courses_model');

courses_model.add({'hehe':});


var root = '/courses/';


exports.addtoSchema = function( ) {

  return function ( req, res, next ){

	console.log("SCHEMA");

  try {

	// local variable to store the course name, which comes from the url /courses/<coursename>
	var name = req.params.course.toUpperCase();

	console.log(name);

	  var students_request = req.body.students;

	  // convert JSON REQUEST to Upper Case
		JSON.stringify(students_request, function (key, value) {
		  if (value && typeof value === 'object') {
			var replacement = {};
			for (var k in value) {
			  if (Object.hasOwnProperty.call(value, k)) {
				value[k] = value[k].toUpperCase();
				replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k].toUpperCase();
			  }
			}
			return replacement;
		  }
		  return value;
		});


	// Store local variables
	  var lastname = students_request.lastname;
	  var firstname = students_request.firstname;

	// First find the course in the db model
	  model.findOne({name: name}, function(err, course_found){

	// If the course exists, check student entries to make sure no duplicate exists
		if (course_found) { 


			course_found.add({ name2: 'string', color: 'string', price: 'number' });

			model.findOneAndUpdate( {name:name}, {
				$set: {
					test: {	
						test1: lastname,
						test2: firstname
					}
				} // ends $pull
			}, function (e, s){
				if (s){
					console.log('-> '+lastname+', '+firstname+' has been set');
					res.send(true);
				} else {
					console.log('-> '+lastname+', '+firstname+' has not been set');
					res.send(false);
				}
			});

	// If the course does not exist
		} else {

			console.log('-> '+name+' doesnt exist.');
			res.send(false);

		}; // ends else

	 }); // ends model.findOne

  } catch(e) {
	console.log(e);
	res.send(false);
  }

  }; // ends return

}; // ends exports.updateCourse






exports.removeStudent = function( ) {

  return function ( req, res, next ){

  try {

	// local variable to store the course name, which comes from the url /courses/<coursename>
	  var students_request = req.body.students;

	  // convert JSON REQUEST to Upper Case
		JSON.stringify(students_request, function (key, value) {
		  if (value && typeof value === 'object') {
			var replacement = {};
			for (var k in value) {
			  if (Object.hasOwnProperty.call(value, k)) {
				value[k] = value[k].toUpperCase();
				replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k].toUpperCase();
			  }
			}
			return replacement;
		  }
		  return value;
		});


	// Store local variables
	  var lastname = students_request.lastname;
	  var firstname = students_request.firstname;

	// First find the course in the db model
	  model.find({}, function(err, course_found){

	// If the course exists, check student entries to make sure no duplicate exists

		course_found.forEach( 

		  function( coursedata ) {

			coursedata.collection.aggregate( [
				{"$match"	: {name : coursedata.name} }
				,{"$unwind"	: "$students" }
				,{"$match"	: {"students.lastname" : lastname} }
				,{"$match"	: {"students.firstname": firstname} }
			],
				function (err_lastname, student_found){

				// If the entry already exists
					if (student_found.length > 0 ) {

					// pull (remove) the student from the student collection withing the course 
						coursedata.update(  {
							$pull: {
								students: {	
									lastname: lastname,
									firstname: firstname
								}
							} // ends $pull
						}, function (e, s){
							if (s){
								console.log('-> '+lastname+', '+firstname+' removed from '+coursedata.name);
								//res.send(true);
							} else {
								console.log('-> Error removing '+lastname+', '+firstname+' from '+coursedata.name+'.');
								//res.send(false);
							}
						});


				// If the student entry does not exist
					} else	{		

						console.log('-> '+lastname+', '+firstname+' does not exist in '+coursedata.name+'.');
						//res.send(false);

					};
			}); // ends collection.aggregate

		}); // ends .forEach()

		res.send(true);

	 }); // ends model.findOne

  } catch (e){
	console.log(e);
	res.send(false);
  }

  }; // ends return

}; // ends exports.updateCourse













exports.removeStudentFromCourse = function( ) {

  return function ( req, res, next ){

  try {

	// local variable to store the course name, which comes from the url /courses/<coursename>
	var name = req.params.course.toUpperCase();

	  var students_request = req.body.students;

	  // convert JSON REQUEST to Upper Case
		JSON.stringify(students_request, function (key, value) {
		  if (value && typeof value === 'object') {
			var replacement = {};
			for (var k in value) {
			  if (Object.hasOwnProperty.call(value, k)) {
				value[k] = value[k].toUpperCase();
				replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k].toUpperCase();
			  }
			}
			return replacement;
		  }
		  return value;
		});


	// Store local variables
	  var lastname = students_request.lastname;
	  var firstname = students_request.firstname;

	// First find the course in the db model
	  model.findOne({name: name}, function(err, course_found){

	// If the course exists, check student entries to make sure no duplicate exists
		if (course_found) { 
			course_found.collection.aggregate([
				{"$match"	: {name : name} }
				,{"$unwind"	: "$students" }
				,{"$match"	: {"students.lastname" : lastname} }
				,{"$match"	: {"students.firstname": firstname} }
			],
				function (err_lastname, student_found){

			// If the entry already exists
					if (student_found.length > 0 ) {

					// pull (remove) the student from the student collection withing the course 
						model.findOneAndUpdate( {name:name}, {
							$pull: {
								students: {	
									lastname: lastname,
									firstname: firstname
								}
							} // ends $pull
						}, function (e, s){
							if (s){
								console.log('-> '+lastname+', '+firstname+' removed from '+name);
								res.send(true);
							} else {
								console.log('-> Error removing '+lastname+', '+firstname+' from '+name+'.');
								res.send(false);
							}
						});

			// If the student entry does not exist
					} else	{		

						console.log('-> '+lastname+', '+firstname+' does not exist in '+name+'.');
						res.send(false);

					};
			}); // ends collection.aggregate

	// If the course does not exist
		} else {

			console.log('-> '+name+' doesnt exist.');
			res.send(false);

		}; // ends else

	 }); // ends model.findOne

  } catch(e) {
	console.log(e);
	res.send(false);
  }

  }; // ends return

}; // ends exports.updateCourse







exports.addStudentToCourse = function( ) {

  return function ( req, res, next ){


  try {

	  var students_request = req.body.students;

	  // convert JSON REQUEST to Upper Case
		JSON.stringify(students_request, function (key, value) {
		  if (value && typeof value === 'object') {
			var replacement = {};
			for (var k in value) {
			  if (Object.hasOwnProperty.call(value, k)) {
				value[k] = value[k].toUpperCase();
				replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k].toUpperCase();
			  }
			}
			return replacement;
		  }
		  return value;
		});


	// Store local variables
	  var lastname = students_request.lastname;
	  var firstname = students_request.firstname;
	  var name = req.query.name.toUpperCase();


	// First find the course in the db model
	  model.findOne({name: name}, function(err, course_found){

	// If the course exists, check student entries to make sure no duplicate exists
		if (course_found) { 
			course_found.collection.aggregate([
				{"$match"	: {name : name} }
				,{"$unwind"	: "$students" }
				,{"$match"	: {"students.lastname" : lastname} }
				,{"$match"	: {"students.firstname": firstname} }
			],
				function (err_lastname, student_found){

			// If the entry already exists
					if (student_found.length > 0 ) {

						console.log('-> '+lastname+', '+firstname+' is already enrolled in '+name+'.');
						res.send(false);

			// If the student entry does not exist, add it to the db
					} else	{		

						course_found.students.push(students_request);				
						course_found.save();
						console.log('-> '+lastname+', '+firstname+' is added to '+name+'.');
						res.send(true);

					};
			}); // ends model.findOne

	// If the course does not exist
		} else {

			console.log('-> '+name+' doesnt exist.');
			res.send(false);

		};

	 }); // ends model.findOne

  } catch(e) {
	console.log(e);
  }

  }; // ends return

}; // ends exports.updateCourse




// routes.index handler
exports.returnAllCoursesInfo = function (){

	return function(req, res, next ){

	  // assign a unique ID
	  var user_id = req.cookies ?
		req.cookies.user_id : undefined;

	  model.
		find({ user_id : user_id }).
		sort( '-updated_at' ).
		exec( function ( err, models ){

			if( err ) return next( err );

			res.json(models);

		});

	}; // ends return

}; // ends exports.index






exports.returnCourseInfo = function () {
	// need this return syntax because we are passing io from app.js
	return function(req, res, next ){

		// see if the query was legal
		try{

			var name = req.query.name.toUpperCase();

			model.findOne( {name:name}, function ( err, course_found ){
				if (course_found) {
					console.log("-> "+course_found.name+" information responded to user");
					res.json(course_found);
				} else { 
					console.log ("-> "+JSON.stringify(name)+" not found");
					res.send(false);
				}
			}); //ends findOne()


		} catch (e) {

			var query = JSON.stringify(req.query);

			// if the query was "/courses"
			if (query == "{}") {
				
				console.log("-> ALL course information responded to user");
				//res.send("\nALL\n");
				returnAllCoursesInfo(req,res,next);

			// if the query was an error
			} else {

				console.log("-> Error reading Query: "+JSON.stringify(req.query));
				res.send(false);

			};

		};

	}; // ends return

}; // ends exports.



// subroutine for exports.createCourse
//		returns all courses -> i.e. http://localhost:3000/courses
returnAllCoursesInfo = function (req, res, next){

	  // assign a unique ID
	  var user_id = req.cookies ?
		req.cookies.user_id : undefined;

	  model.
		find({ user_id : user_id }).
		sort( '-updated_at' ).
		exec( function ( err, models ){

			if( err ) return next( err );

			res.json(models);

		});

}; // ends function




// routes.create handler
exports.createCourse = function () {

    return function(req, res, next) {

	try{

		var name = req.body.name.toUpperCase();
		model.findOne({name : name}, function (find_err, result){

			if (find_err) return find_err;

			if ( result == null ) {

				  new model({
					  user_id    : req.cookies.user_id,
					  name		 : name,
					  students   : req.body.students,//["randcourse1","randcourse2"],
					  updated_at : Date.now(),
						hehe : 51,
						gahhh : "asdasd"
				  }).save( function ( err, model, next ){

						if( err ) return next( err );

						console.log('-> '+name+' created');

						res.send( true );

				  }); // ends save

			} else {

				console.log('-> '+name+' already exists');
				res.send( false );

			};

		}); // ends .findOne()


	} catch (e) {
		console.log(e);
		res.send(false);
	}


	}; // ends return

}; // ends createCourse




exports.removeCourse = function () {
    return function(req, res, next) {

	  try{

		// local variable to save the query
		var name = req.query.name.toUpperCase();

		model.findOne( {name: name}, function ( err, destroy_model ){
			var user_id = req.cookies ?
			   req.cookies.user_id : undefined;

			/*
				if( model.user_id !== user_id ){
				  return utils.forbidden( res );
				}
			*/

			// if the course does exist, then delete it
			if (destroy_model != null) {

				destroy_model.remove( function ( err, destroy_model ){

				  	if (destroy_model) {
						res.send(true);

					// there was an error deleting
					} else {
						console.log("-> Error deleting "+name);
						res.send(false);
					}

				}); // ends .remove()
			
			// if the course does not exist, then return an error
			} else {

				console.log("-> "+name+" cannot be removed because it does not exist");
				res.send(false);

			}; // ends else
				
		}); // ends findOne

	  } catch (e){
		console.log(e);
	  }

    }; // ends return

}; // ends remove course






